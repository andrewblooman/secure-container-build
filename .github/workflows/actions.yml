name: Build, Scan, SBOM, Sign, and Attest Image

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  # For Docker Hub personal accounts, image name must be username/repository
  IMAGE_NAME: andyblooman/secure-container-build
  IMAGE_TAG: latest
  REGISTRY: docker.io

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image_uri: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push container image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          build-args: |
            BUILDKIT_INLINE_CACHE=1

  scan:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - name: Pull image for scanning
        run: |
          echo "Pulling image: ${{ needs.build.outputs.image_uri }}"
          docker pull ${{ needs.build.outputs.image_uri }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'image'
          image-ref: '${{ needs.build.outputs.image_uri }}'
          format: 'table'
          severity: 'HIGH,CRITICAL'
          ignore-unfixed: true
          exit-code: 0  # set to 1 if you want to fail on criticals

  sbom:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    outputs:
      sbom_path: sbom.spdx.json
    steps:
      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - name: Pull image for SBOM generation
        run: |
          echo "Pulling image: ${{ needs.build.outputs.image_uri }}"
          docker pull ${{ needs.build.outputs.image_uri }}

      - name: Install Syft
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin

      - name: Generate SBOM
        run: |
          echo "Generating SBOM for image: ${{ needs.build.outputs.image_uri }}"
          syft "docker:${{ needs.build.outputs.image_uri }}" -o spdx-json > sbom.spdx.json
          echo "✅ SBOM generated"
          ls -lh sbom.spdx.json

      - name: Upload SBOM artifact
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.spdx.json
          retention-days: 5  # Optional: specify how long to keep the artifact

  sign-and-attest:
    needs: [build, sbom]
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      packages: write
    steps:
      - name: Download SBOM
        uses: actions/download-artifact@v4
        with:
          name: sbom

      - name: Install Cosign
        run: |
          curl -sSfL https://github.com/sigstore/cosign/releases/latest/download/cosign-linux-amd64 -o /usr/local/bin/cosign
          chmod +x /usr/local/bin/cosign

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Keyless sign the image
        env:
          COSIGN_EXPERIMENTAL: "true"
        run: |
          cosign sign ${{ needs.build.outputs.image_uri }} --yes

      - name: Attach and sign SBOM
        env:
          COSIGN_EXPERIMENTAL: "true"
        run: |
          cosign attach sbom --sbom sbom.spdx.json ${{ needs.build.outputs.image_uri }}
          cosign sign ${{ needs.build.outputs.image_uri }}-sbom --yes
          echo "✅ SBOM attached and signed"

      - name: Generate provenance
        run: |
          cat <<EOF > provenance.json
          {
            "builder": {
              "id": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            },
            "buildType": "https://github.com/Attestations/GitHubActions@v1",
            "invocation": {
              "parameters": {
                "ref": "${{ github.ref_name }}",
                "sha": "${{ github.sha }}"
              },
              "environment": {
                "repository": "${{ github.repository }}",
                "trigger": "${{ github.event_name }}"
              }
            },
            "materials": [
              {
                "uri": "git+https://github.com/${{ github.repository }}@${{ github.sha }}"
              }
            ]
          }
          EOF

      - name: Attach and sign provenance
        env:
          COSIGN_EXPERIMENTAL: "true"
        run: |
          cosign attest \
            --predicate provenance.json \
            --type slsaprovenance \
            ${{ needs.build.outputs.image_uri }}
          echo "✅ Provenance attestation generated and attached"
